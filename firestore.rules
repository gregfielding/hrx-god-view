rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- USERS ---
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && isAssignedToTenant(resource.data.tenantId);
      allow read: if isAuthenticated() && isTenantAdmin(resource.data.tenantId);
      // Allow users to read other users who belong to the same tenant (for salespeople functionality)
      allow read: if isAuthenticated() && hasCRMAccess() && belongsToSameTenant(resource.data);
      // Allow high-security-level users to update user profiles
      allow write: if isAuthenticated() && isHighSecurityLevel();
      // Unified Association Service access for salespeople
      allow read: if isAuthenticated() && request.auth.uid != null;
      
      // --- USER FOLLOWED COMPANIES ---
      match /followedCompanies/{companyId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      // --- USER SUBCOLLECTIONS ---
      match /notes/{noteId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(resource.data.tenantId);
      }
      
      match /moments/{momentId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(resource.data.tenantId);
      }
      
      match /feedback/{feedbackId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(resource.data.tenantId);
      }
      
      match /selfImprovement/{improvementId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(resource.data.tenantId);
      }
      
      match /activityLogs/{logId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(resource.data.tenantId);
      }
    }

    // --- TENANTS (Unified Agencies and Customers) ---
    match /tenants/{tenantId} {
      allow read, write: if isHRX();
      allow read: if isAssignedToTenant(tenantId);
      allow create: if isHRX() && validateTenantSlug();
      allow update: if isHRX() && (resource.data.slug == request.resource.data.slug || validateTenantSlug());

      // --- DIVISIONS (Tenants) ---
      match /divisions/{divisionId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }

      // --- REGIONS (Tenants) ---
      match /regions/{regionId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
      }

      // --- DIVISION TYPES (Tenants) ---
      match /divisionTypes/{divisionTypeId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
      }

      // --- CUSTOMERS (Subcollection for tenants that have customers) ---
      match /customers/{customerId} {
        allow read, write: if isHRX();
        allow read: if isAssignedToTenant(tenantId);
        
        // --- LOCATIONS (Customer Locations) ---
        match /locations/{locationId} {
          allow read, write: if isHRX();
          allow read: if isAssignedToTenant(tenantId);
        }
        
        // --- DEPARTMENTS (Customer Departments) ---
        match /departments/{departmentId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
        }
        
        // --- AI SETTINGS (Customer AI Settings) ---
        match /aiSettings/{settingName} {
          allow read, write: if isHRX();
          allow read, write: if isTenantAdmin(tenantId);
        }
        
        // --- AI TRAINING (Customer AI Training) ---
        match /aiTraining/{trainingId} {
          allow read, write: if isHRX();
          allow read, write: if isTenantAdmin(tenantId);
        }

      }

      // --- EMAIL LOGS (Tenant-level Email History) ---
      // Emails are stored at tenants/{tenantId}/email_logs/{emailId}
      match /email_logs/{emailId} {
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(tenantId);
        // Allow any authenticated user assigned to this tenant (read-only typically)
        allow read, write: if isAuthenticated() && isAssignedToTenant(tenantId);
      }

      // --- AI CHAT THREADS (Tenant-level) ---
      // Conversations stored at tenants/{tenantId}/ai_chats/{threadId}/messages/{messageId}
      match /ai_chats/{threadId} {
        allow read, write: if isAuthenticated() && isAssignedToTenant(tenantId);
        match /messages/{messageId} {
          allow read, write: if isAuthenticated() && isAssignedToTenant(tenantId);
        }
      }

      // --- CONTACTS (Customer Contacts) ---
      match /contacts/{contactId} {
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }

      // --- CONTACTS (Tenants) ---
      match /contacts/{contactId} {
        allow read, write: if isHRX();
      }

      // --- LOCATIONS (Tenants) ---
      match /locations/{locationId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }

      // --- COMPANY LOCATIONS MIRROR (for fast state queries) ---
      match /company_locations/{docId} {
        // Read access for users in this tenant (CRM UI)
        allow read: if isAssignedToTenant(tenantId);
        // Writes come from Cloud Functions using Admin SDK
        allow write: if false;
      }
      
      // --- DEPARTMENTS (Tenants) ---
      match /departments/{departmentId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }
      
      // --- WORKFORCE (Tenants) ---
      match /workforce/{workerId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }
      
      // --- AI SETTINGS (Tenants) ---
      match /aiSettings/{settingName} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
      }
      
      // --- MODULES (Tenants) ---
      match /modules/{moduleId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        
        // --- HRX-FLEX MODULE SUBCOLLECTIONS ---
        match /jobTitles/{jobTitleId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
        }
        
        match /uniformDefaults/{uniformId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
        }
        
        match /positions/{positionId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
        }
        
        // --- CATCH-ALL FOR HRX-FLEX SUBCOLLECTIONS ---
        match /{subcollection}/{documentId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
        }
      }
      
      // --- AI TRAINING (Tenants) ---
      match /aiTraining/{trainingId} {
        allow read, write: if isHRX();
        allow read, write: if isTenantAdmin(tenantId);
      }

      // --- INTEGRATIONS (Tenants) ---
      match /integrations/{integrationId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
      }

      // --- USER GROUPS (Tenants) ---
      match /userGroups/{groupId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }

      // --- USERS (Tenants) ---
      match /users/{userId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }

      // --- SETTINGS (Tenants) ---
      match /settings/{settingsId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }
      
      // --- BRANDING (Tenants) ---
      match /branding/{brandingId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
      }
      
      // --- TENANTS (Subcollection for customer references) ---
      match /tenants/{customerId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }
      
      // --- JOB ORDERS (Tenants) ---
      match /jobOrders/{jobOrderId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);

        // --- SHIFTS (Job Orders) ---
        match /shifts/{shiftId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
          allow read: if isAssignedToTenant(tenantId);
        }
      }
      
      // --- CRM COLLECTIONS (Tenants) ---
      match /crm_contacts/{contactId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow read: if isAuthenticated() && isAssignedToTenant(tenantId); // For activity logging
        allow read: if isAuthenticated() && isHighSecurityLevel(); // Admin override
        // Temporary: Allow all authenticated users for debugging
        allow read: if isAuthenticated();
        // Unified Association Service access
        allow read: if isAuthenticated() && request.auth.uid != null;

        // Prevent direct writes to associations arrays; must go through callable
        allow update: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess() &&
          !(request.resource.data.diff(resource.data).changedKeys().hasAny(['associations']) ||
            request.resource.data.keys().hasAny(['associations']));
      }
      
      match /crm_companies/{companyId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow read: if isAuthenticated() && isAssignedToTenant(tenantId); // For activity logging
        allow read: if isAuthenticated() && isHighSecurityLevel(); // Admin override
        // Temporary: Allow all authenticated users for debugging
        allow read: if isAuthenticated();
        // Unified Association Service access
        allow read: if isAuthenticated() && request.auth.uid != null;

        // Prevent direct writes to associations arrays; must go through callable
        allow update: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess() &&
          !(request.resource.data.diff(resource.data).changedKeys().hasAny(['associations']) ||
            request.resource.data.keys().hasAny(['associations']));
        
        // --- COMPANY LOCATIONS ---
        match /locations/{locationId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
          allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
          allow read: if isAssignedToTenant(tenantId);
          // Allow all authenticated users to read locations for association service
          allow read: if isAuthenticated() && request.auth.uid != null;
        }
        
        // --- COMPANY DIVISIONS ---
        match /divisions/{divisionId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
          allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
          allow read: if isAssignedToTenant(tenantId);
        }
        
        // --- COMPANY NEWS ARTICLES ---
        match /newsArticles/{articleId} {
          allow read, write: if isHRX() || isTenantAdmin(tenantId);
          allow read: if isAssignedToTenant(tenantId);
          allow read: if isAuthenticated(); // Temporary for testing
        }
      }
      
      match /crm_deals/{dealId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        // Allow updating fields except associations directly (enforce callable for associations)
        allow update: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess() &&
          !(request.resource.data.diff(resource.data).changedKeys().hasAny(['associations']) ||
            request.resource.data.keys().hasAny(['associations']));
        allow read: if isAuthenticated() && isHighSecurityLevel(); // Admin override
        // Temporary: Allow all authenticated users for debugging
        allow read: if isAuthenticated();
        // Unified Association Service access
        allow read: if isAuthenticated() && request.auth.uid != null;
      }
      
      match /crm_pipeline_stages/{stageId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
      }
      
      match /crm_salespeople/{salespersonId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        // Temporary: Allow all authenticated users for debugging
        allow read: if isAuthenticated();
      }
      
      match /crm_tasks/{taskId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        // Prevent direct writes to associations arrays; must go through callable if introduced
        allow update: if isAuthenticated() && (resource.data.assignedTo == request.auth.uid || isTenantAdmin(tenantId)) && (
          !(request.resource.data.diff(resource.data).changedKeys().hasAny(['associations']) ||
            request.resource.data.keys().hasAny(['associations']))
        );
        allow delete: if isAuthenticated() && (resource.data.assignedTo == request.auth.uid || isTenantAdmin(tenantId));
        allow read, write, create, update, delete: if isAuthenticated() && isHighSecurityLevel(); // Admin override
      }
      
      // Tasks collection (for task management system)
      match /tasks/{taskId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.assignedTo == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && (resource.data.assignedTo == request.auth.uid || isTenantAdmin(tenantId));
        allow read, write, create, update, delete: if isAuthenticated() && isHighSecurityLevel(); // Admin override
      }
      
      // AI Task Suggestions
      match /ai_task_suggestions/{suggestionId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.salespersonId == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && (resource.data.salespersonId == request.auth.uid || isTenantAdmin(tenantId));
      }
      
      // Activity Logs
      match /activityLogs/{logId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow read, write, create, update, delete: if isAuthenticated() && isAssignedToTenant(tenantId);
        allow read, write, create, update, delete: if isAuthenticated() && isHighSecurityLevel();
        // Temporary: Allow all authenticated users for debugging
        allow read, write, create, update, delete: if isAuthenticated();
      }
      
      // --- CRM NOTES COLLECTIONS ---
      match /contact_notes/{noteId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
      }
      
      match /company_notes/{noteId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
      }
      
      match /deal_notes/{noteId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
      }
      
      match /location_notes/{noteId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && (resource.data.authorId == request.auth.uid || isTenantAdmin(tenantId));
      }
      
      // 🆕 UNIVERSAL ASSOCIATIONS SYSTEM
      match /crm_associations/{associationId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read, write: if isAssignedToTenant(tenantId) && hasCRMAccess();
        allow read: if isAssignedToTenant(tenantId);
        allow create: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
        allow update: if isAuthenticated() && (resource.data.createdBy == request.auth.uid || isTenantAdmin(tenantId));
        allow delete: if isAuthenticated() && isAssignedToTenant(tenantId) && hasCRMAccess();
      }
      
      // --- KPI SYSTEM COLLECTIONS ---
      match /kpi_definitions/{kpiId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAssignedToTenant(tenantId);
      }
      
      match /kpi_assignments/{assignmentId} {
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAuthenticated() && request.auth.uid == resource.data.salespersonId;
        allow read: if isAssignedToTenant(tenantId);
      }
      
      match /kpi_tracking/{trackingId} {
        allow read: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAuthenticated() && request.auth.uid == resource.data.salespersonId;
        allow read: if isAssignedToTenant(tenantId);
        allow write: if isAuthenticated() && request.auth.uid == resource.data.salespersonId;
        allow create: if isHRX() || isTenantAdmin(tenantId);
      }
      
      match /kpi_activities/{activityId} {
        allow read: if isHRX() || isTenantAdmin(tenantId);
        allow read: if isAuthenticated() && request.auth.uid == resource.data.salespersonId;
        allow read: if isAssignedToTenant(tenantId);
        allow write: if isAuthenticated() && request.auth.uid == resource.data.salespersonId;
        allow create: if isHRX() || isTenantAdmin(tenantId);
      }
      
      match /kpi_task_suggestions/{suggestionId} {
        allow read, write: if isAuthenticated() && request.auth.uid == resource.data.salespersonId;
        allow read, write: if isHRX() || isTenantAdmin(tenantId);
        allow create: if isHRX() || isTenantAdmin(tenantId);
      }
    }

    // Context Engine: Only HRX admins can read/write
    match /settings/{docId} {
      allow read, write: if isHRX();
    }
    match /settings/context/{docId} {
      allow read, write: if isHRX();
    }
    match /settings/context/scenarios/{scenarioId} {
      allow read, write: if isHRX();
    }
    match /context_versions/{versionId} {
      allow read, write: if isHRX();
    }
    match /context_audit/{auditId} {
      allow read, write: if isHRX();
    }
    
    // --- ASSIGNMENTS ---
    match /assignments/{assignmentId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read: if isAuthenticated() && isAssignedToTenant(resource.data.tenantId);
    }
    
    // --- SHIFTS ---
    match /shifts/{shiftId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read: if isAuthenticated() && isAssignedToTenant(resource.data.tenantId);
    }
    
    // --- JOB ORDERS ---
    match /jobOrders/{jobOrderId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read: if isAuthenticated() && isAssignedToTenant(resource.data.tenantId);
    }
    
    // --- GLOBAL AI SETTINGS ---
    match /appAiSettings/{documentId} {
      allow read, write: if isHRX();
    }

    // Context Journeys subcollection
    match /appAiSettings/global/contextJourneys/{journeyId} {
      allow read, write: if isHRX();
    }

    // --- AI MOMENTS ---
    match /aiMoments/{momentId} {
      allow read, write: if isHRX();
    }

    // --- SCHEDULED MOMENTS ---
    match /scheduledMoments/{scheduledMomentId} {
      allow read, write: if isHRX();
    }

    // --- FEEDBACK CAMPAIGNS ---
    match /feedbackCampaigns/{campaignId} {
      allow read, write: if isHRX();
    }

    // --- FEEDBACK RESPONSES ---
    match /feedbackResponses/{responseId} {
      allow read, write: if isHRX();
    }

    // --- AI LOGS ---
    match /ai_logs/{logId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.workerId ||
        isTenantAdmin(resource.data.tenantId)
      );
      allow read: if isAuthenticated() && hasCRMAccess() && (
        resource.data.targetType == 'deal' && 
        resource.data.targetId != null
      );
      // Allow reading deal-related AI logs for users with CRM access
      allow read: if isAuthenticated() && hasCRMAccess() && (
        resource.data.eventType != null && 
        resource.data.eventType.matches('deal\\..*')
      );
      // Temporary: Allow reading AI logs for any authenticated user assigned to the tenant
      allow read: if isAuthenticated() && isAssignedToTenant(resource.data.tenantId);
      // Temporary: Allow all authenticated users for debugging
      allow read: if isAuthenticated();
    }

    // --- MOMENT ANALYSIS ---
    match /moment_analysis/{analysisId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read: if isTenantAdmin(resource.data.tenantId);
    }

    // --- FEEDBACK ANALYSIS ---
    match /feedback_analysis/{analysisId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read: if isTenantAdmin(resource.data.tenantId);
    }

    // --- SELF IMPROVEMENT REPORTS ---
    match /selfImprovementReports/{reportId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow read: if isTenantAdmin(resource.data.tenantId);
    }

    // --- VECTOR COLLECTIONS ---
    match /vectorCollections/{collectionId} {
      allow read, write: if isHRX();
    }

    // --- CONTEXT ENGINES ---
    match /contextEngines/{engineId} {
      allow read, write: if isHRX();
    }

    // --- CONTEXT SOURCES ---
    match /contextSources/{sourceId} {
      allow read, write: if isHRX();
    }

    // --- RETRIEVAL FILTERS ---
    match /retrievalFilters/{filterId} {
      allow read, write: if isHRX();
    }

    // --- PROMPT TEMPLATES ---
    match /promptTemplates/{templateId} {
      allow read, write: if isHRX();
    }

    // --- AUTODEVOPS LOGS ---
    match /autoDevOpsLogs/{logId} {
      allow read, write: if isHRX();
    }

    // --- AUTODEVOPS SETTINGS ---
    match /autoDevOpsSettings/{settingId} {
      allow read, write: if isHRX();
    }

    // --- AI CHAT MODULE ---
    match /modules/ai-chat {
      allow read, write: if isHRX();
    }

    // --- CONVERSATIONS ---
    match /conversations/{conversationId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.workerId;
      allow create: if isAuthenticated();
    }

    // --- CHECKINS ---
    match /checkins/{checkinId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.workerId;
      allow create: if isAuthenticated();
    }

    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
      allow read, write: if isHRX();
      // TODO: Add tenant specific rules when implementing their notification views
    }

    // Broadcast Module Rules
    match /broadcasts/{broadcastId} {
      allow read: if request.auth != null && (
        resource.data.tenantId == request.auth.token.tenantId ||
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        request.auth.token.role == 'admin' ||
        request.auth.token.role == 'tenant_admin'
      );
      allow update: if request.auth != null && (
        resource.data.senderId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
      allow delete: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    match /broadcast_notifications/{notificationId} {
      allow read: if request.auth != null && (
        resource.data.recipientId == request.auth.uid ||
        resource.data.tenantId == request.auth.token.tenantId ||
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        request.auth.token.role == 'admin' ||
        request.auth.token.role == 'tenant_admin'
      );
      allow update: if request.auth != null && (
        resource.data.recipientId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
    }
    
    match /broadcast_replies/{replyId} {
      allow read: if request.auth != null && (
        resource.data.workerId == request.auth.uid ||
        resource.data.tenantId == request.auth.token.tenantId ||
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        resource.data.workerId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
      allow update: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    match /broadcast_templates/{templateId} {
      allow read: if request.auth != null && (
        resource.data.tenantId == request.auth.token.tenantId ||
        request.auth.token.role == 'admin'
      );
      allow write: if request.auth != null && (
        request.auth.token.role == 'admin' ||
        request.auth.token.role == 'tenant_admin'
      );
    }

    // Campaigns Module Rules
    match /campaigns/{campaignId} {
      allow read: if request.auth != null && (
        resource.data.tenantId == request.auth.token.tenantId ||
        resource.data.createdBy == 'HRX' ||
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        request.auth.token.role == 'admin' ||
        request.auth.token.role == 'tenant_admin'
      );
      allow update: if request.auth != null && (
        resource.data.creatorUserId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
      allow delete: if request.auth != null && (
        request.auth.token.role == 'admin' ||
        resource.data.creatorUserId == request.auth.uid
      );
    }
    
    match /campaign_responses/{responseId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.tenantId == request.auth.token.tenantId ||
        request.auth.token.role == 'admin'
      );
      allow create: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.token.role == 'admin'
      );
      allow update: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    match /campaign_schedules/{scheduleId} {
      allow read, write: if request.auth != null && (
        resource.data.tenantId == request.auth.token.tenantId ||
        request.auth.token.role == 'admin'
      );
    }
    
    match /campaign_analysis/{analysisId} {
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --- JSI (Job Satisfaction Insights) ---
    match /jsiScores/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /jsiLogs/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
    }
    match /jsiPrompts/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /jsiAlerts/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
    }
    match /jsiRiskFlags/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
    }
    match /jsiSettings/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(docId);
    }
    match /jsiBaselines/{docId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
    }
    match /aiActions/{docId} {
      allow read, write: if isHRX();
    }

    // --- HRX MODULES ---

    // --- RESET MODE ---
    match /resetMode/{resetId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /resetModeTriggers/{triggerId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /resetModeCheckIns/{checkInId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }

    // --- MINI-LEARNING BOOSTS ---
    match /learningBoosts/{boostId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && resource.data.isActive == true;
    }
    match /userLearningBoosts/{userBoostId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /userLearningProfiles/{userId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated();
    }

    // --- PROFESSIONAL GROWTH ---
    match /careerGoals/{goalId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /careerJournal/{entryId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /skillsInventory/{userId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated();
    }
    match /growthMetrics/{metricId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // --- WORK-LIFE BALANCE ---
    match /balanceCheckIns/{checkInId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /wellbeingReflections/{reflectionId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
    }
    match /burnoutRiskIndex/{riskId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /balanceTrends/{trendId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /balanceAlerts/{alertId} {
      allow read, write: if isHRX() || isTenantAdmin(resource.data.tenantId);
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // --- MODULES CONFIGURATION ---
    match /modules/{moduleId} {
      allow read, write: if isHRX();
    }

    // --- MOTIVATIONS (Motivational Quotes) ---
    match /motivations/{motivationId} {
      allow read: if isAuthenticated();
      allow write: if isHRX();
    }

    // --- HELP TOPICS ---
    match /help_topics/{topicId} {
      allow read: if isAuthenticated();
      allow write: if isHRX();
    }

    // --- INVITES ---
    match /invites/{inviteId} {
      allow read, write: if isHRX();
      allow read: if isAuthenticated() && resource.data.email == request.auth.token.email;
    }

    // --- COMPANY NEWS CACHE ---
    match /companyNewsCache/{companyId}/{date} {
      allow read: if isAuthenticated();
      allow write: if false; // Only allow writes from Cloud Functions
    }

    // --- DEFAULT CATCH-ALL ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- FUNCTIONS ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isHRX() {
      return isAuthenticated() && getUser().role == "HRX";
    }

    function isAssignedToTenant(tenantId) {
      return isAuthenticated() && (
        getUser().tenantIds != null && (
          (getUser().tenantIds is list && getUser().tenantIds.hasAny([tenantId])) ||
          (getUser().tenantIds is map && tenantId in getUser().tenantIds)
        ) ||
        getUser().tenantId == tenantId ||
        getUser().activeTenantId == tenantId
      );
    }
    
    function isTenantAdmin(tenantId) {
      let user = getUser();
      return isAssignedToTenant(tenantId) && (
        user.role == "HRX" ||
        user.securityLevel == "Admin" ||
        user.securityLevel == "6" ||
        user.securityLevel == "7" ||
        (user.tenantIds != null && 
         tenantId in user.tenantIds && 
         (user.tenantIds[tenantId].securityLevel == "Admin" || 
          user.tenantIds[tenantId].securityLevel == "6" ||
          user.tenantIds[tenantId].securityLevel == "7"))
      );
    }
    
    function validateTenantSlug() {
      let slug = request.resource.data.slug;
      return slug != null &&
             slug != "" &&
             slug.matches('^[a-z0-9-]+$') &&
             slug.size() >= 3 &&
             slug.size() <= 50 &&
             !slug.matches('^-.*') &&
             !slug.matches('.*-$');
    }
    
    function hasCRMAccess() {
      let user = getUser();
      // Temporarily allow any authenticated user for CRM access (since module is only visible to salespeople)
      return isAuthenticated() ||
             user.securityLevel == "4" || 
             user.securityLevel == "5" || 
             user.securityLevel == "6" || 
             user.securityLevel == "7" ||
             user.crm_sales == true ||
             user.role == "HRX";
    }
    
    function belongsToSameTenant(targetUserData) {
      let currentUser = getUser();
      
      // Check if both users belong to the same tenant
      return (currentUser.tenantIds != null && targetUserData.tenantIds != null && 
              currentUser.tenantIds is map && targetUserData.tenantIds is map &&
              currentUser.tenantIds.keys().hasAny(targetUserData.tenantIds.keys())) ||
             (currentUser.tenantId != null && targetUserData.tenantId != null && 
              currentUser.tenantId == targetUserData.tenantId) ||
             (currentUser.activeTenantId != null && targetUserData.tenantIds != null &&
              targetUserData.tenantIds is map && currentUser.activeTenantId in targetUserData.tenantIds);
    }
    
    function isHighSecurityLevel() {
      let user = getUser();
      return user.securityLevel == "6" || user.securityLevel == "7";
    }
    // AI chat threads
    match /ai_chats/{threadId} {
      allow read, write: if isAuthenticated() && isAssignedToTenant(tenantId);
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && isAssignedToTenant(tenantId);
      }
    }
  }
}