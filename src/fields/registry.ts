import type { Registry } from './FieldTypes';

export const SCHEMA_VERSION = 1;

// Minimal Phase 1 registry for Job Order + Deal shared fields we actively use
export const FieldRegistry: Registry = {
  // Discovery
  usesAgencies: { id: 'usesAgencies', label: 'Currently Using Agencies', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.usesAgencies' },
  openToNewAgency: { id: 'openToNewAgency', label: 'Open to a New Agency', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.openToNewAgency' },
  hasUsedBefore: { id: 'hasUsedBefore', label: 'Have they used staffing agencies before?', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.hasUsedBefore' },
  jobTitle: { id: 'jobTitle', label: 'Job Title', type: 'text', usedBy: ['All'] },
  endDate: { id: 'endDate', label: 'End Date', type: 'date', required: false, usedBy: ['All'] },
  startDate: { id: 'startDate', label: 'Start Date', type: 'date', required: false, usedBy: ['All'] },
  payRate: { id: 'payRate', label: 'Pay Rate', type: 'number', usedBy: ['All'], hints: { unit: '$' } },
  billRate: { id: 'billRate', label: 'Bill Rate', type: 'number', usedBy: ['Both'], hints: { unit: '$' } },
  calculatedBillRate: { id: 'calculatedBillRate', label: 'Calculated Bill Rate', type: 'number', usedBy: ['JobOrder'], hints: { unit: '$' } },
  markup: { id: 'markup', label: 'Markup (%)', type: 'number', usedBy: ['Both'], hints: { unit: '%' } },
  workersNeeded: { id: 'workersNeeded', label: 'Workers Needed', type: 'number', usedBy: ['All'] },
  estimatedRevenue: { id: 'estimatedRevenue', label: 'Estimated Revenue', type: 'currency', usedBy: ['JobOrder'] },
  notes: { id: 'notes', label: 'Notes', type: 'textarea', usedBy: ['JobOrder'] },
  experienceLevel: { id: 'experienceLevel', label: 'Experience Level', type: 'select', options: [
    { value: 'entry', label: 'Entry' },
    { value: 'intermediate', label: 'Intermediate' },
    { value: 'advanced', label: 'Advanced' },
  ], usedBy: ['Both'] },
  onsiteSupervisionRequired: { id: 'onsiteSupervisionRequired', label: 'Onsite Supervision Required', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.onsiteSupervisor' },
  companyId: { id: 'companyId', label: 'Company Id', type: 'text', usedBy: ['All'] },
  companyName: { id: 'companyName', label: 'Company Name', type: 'text', usedBy: ['All'] },
  hrContactId: { id: 'hrContactId', label: 'HR Contact', type: 'text', usedBy: ['Both'] },
  decisionMaker: { id: 'decisionMaker', label: 'Decision Maker', type: 'text', usedBy: ['Both'] },
  operationsContactId: { id: 'operationsContactId', label: 'Operations Contact', type: 'text', usedBy: ['Both'] },
  procurementContactId: { id: 'procurementContactId', label: 'Procurement Contact', type: 'text', usedBy: ['Both'] },
  billingContactId: { id: 'billingContactId', label: 'Billing Contact', type: 'text', usedBy: ['Both'] },
  safetyContactId: { id: 'safetyContactId', label: 'Safety Contact', type: 'text', usedBy: ['Both'] },
  invoiceContactId: { id: 'invoiceContactId', label: 'Invoice Contact', type: 'text', usedBy: ['Both'] },
  worksiteId: { id: 'worksiteId', label: 'Worksite Id', type: 'text', usedBy: ['All'] },
  worksiteName: { id: 'worksiteName', label: 'Worksite Name', type: 'text', usedBy: ['All'] },
  shiftType: { id: 'shiftType', label: 'Shift Type', type: 'select', options: [
    { value: 'day', label: 'Day' },
    { value: 'swing', label: 'Swing' },
    { value: 'night', label: 'Night' },
  ], usedBy: ['All'], tags: ['scheduling'] },
  shiftStart: { id: 'shiftStart', label: 'Shift Start Time', type: 'time', usedBy: ['All'], tags: ['scheduling'] },
  shiftEnd: { id: 'shiftEnd', label: 'Shift End Time', type: 'time', usedBy: ['All'], tags: ['scheduling'] },
  // Discovery-specific (also useful in Deals)
  currentStaffCount: { id: 'currentStaffCount', label: 'Current Staff Count', type: 'number', usedBy: ['Both'], stage: 'discovery', path: 'discovery.currentStaffCount' },
  currentAgencyCount: { id: 'currentAgencyCount', label: 'Current Agency Count', type: 'number', usedBy: ['Both'], stage: 'discovery', path: 'discovery.currentAgencyCount' },
  currentSatisfactionLevel: { id: 'currentSatisfactionLevel', label: 'Satisfaction Level', type: 'select', options: [
    { value: 'very_happy', label: 'Very Happy' },
    { value: 'somewhat', label: 'Somewhat Satisfied' },
    { value: 'frustrated', label: 'Frustrated' },
  ], usedBy: ['Both'], stage: 'discovery', path: 'discovery.satisfactionLevel' },
  satisfactionLevel: { id: 'satisfactionLevel', label: 'Satisfaction Level', type: 'select', options: [
    { value: 'very_happy', label: 'Very Happy' },
    { value: 'somewhat', label: 'Somewhat Satisfied' },
    { value: 'frustrated', label: 'Frustrated' },
  ], usedBy: ['Both'], stage: 'discovery', path: 'discovery.satisfactionLevel' },
  currentStruggles: { id: 'currentStruggles', label: 'Current Struggles', type: 'textarea', usedBy: ['Both'], stage: 'discovery', path: 'discovery.struggles' },
  struggles: { id: 'struggles', label: 'Current Struggles', type: 'textarea', usedBy: ['Both'], stage: 'discovery', path: 'discovery.struggles' },
  jobTitles: { id: 'jobTitles', label: 'Job Titles', type: 'array', usedBy: ['Both'], stage: 'discovery', path: 'discovery.jobTitles' },
  shifts: { id: 'shifts', label: 'Shifts', type: 'array', usedBy: ['Both'], stage: 'discovery', path: 'discovery.shifts' },
  employmentType: { id: 'employmentType', label: 'Employment Type', type: 'select', options: [
    { value: 'seasonal', label: 'Seasonal' },
    { value: 'year_round', label: 'Year Round' },
    { value: 'career', label: 'Career' },
    { value: 'gig', label: 'Gig' },
  ], required: true, usedBy: ['All'], stage: 'discovery', path: 'discovery.seasonalOrYearRound' },
  seasonalOrYearRound: { id: 'seasonalOrYearRound', label: 'Seasonal or Year Round', type: 'select', options: [
    { value: 'seasonal', label: 'Seasonal' },
    { value: 'year_round', label: 'Year Round' },
  ], usedBy: ['Both'], stage: 'discovery', path: 'discovery.seasonalOrYearRound' },
  hasUsedAgenciesBefore: { id: 'hasUsedAgenciesBefore', label: 'Has Used Agencies Before', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.hasUsedBefore' },
  lastAgencyUsed: { id: 'lastAgencyUsed', label: 'Last Agency Used', type: 'text', usedBy: ['Both'], stage: 'discovery', path: 'discovery.lastUsed' },
  reasonStoppedUsingAgencies: { id: 'reasonStoppedUsingAgencies', label: 'Reason Stopped Using Agencies', type: 'textarea', usedBy: ['Both'], stage: 'discovery', path: 'discovery.reasonStopped' },
  openToUsingAgenciesAgain: { id: 'openToUsingAgenciesAgain', label: 'Open to Using Agencies Again', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.openToUsingAgain' },
  additionalJobTitles: { id: 'additionalJobTitles', label: 'Additional Job Titles', type: 'text', usedBy: ['Both'] },
  shiftTimes: { id: 'shiftTimes', label: 'Shift Times', type: 'text', usedBy: ['Both'], stage: 'discovery', path: 'discovery.shifts' },
  noInterest: { id: 'noInterest', label: 'No Current Interest', type: 'boolean', usedBy: ['Both'], stage: 'discovery', path: 'discovery.noInterest' },
  dripMarketingTag: { id: 'dripMarketingTag', label: 'Drip Marketing Tag', type: 'text', usedBy: ['Both'], stage: 'discovery', path: 'discovery.dripMarketingTag' },
  discoveryNotes: { id: 'discoveryNotes', label: 'Discovery Notes', type: 'textarea', usedBy: ['Both'], stage: 'discovery', path: 'discovery.notes' },

  // Qualification
  mustHave: { id: 'mustHave', label: 'Must Have Requirements', type: 'textarea', usedBy: ['Both'], stage: 'qualification', path: 'qualification.mustHave' },
  mustAvoid: { id: 'mustAvoid', label: 'Must Avoid', type: 'textarea', usedBy: ['Both'], stage: 'qualification', path: 'qualification.mustAvoid' },
  potentialObstacles: { id: 'potentialObstacles', label: 'Potential Obstacles', type: 'array', usedBy: ['Both'], stage: 'qualification', path: 'qualification.potentialObstacles' },
  expectedStartDate: { id: 'expectedStartDate', label: 'Expected Start Date', type: 'date', usedBy: ['Both'], stage: 'qualification', path: 'qualification.expectedStartDate' },
  starting: { id: 'starting', label: 'Initial Order', type: 'number', usedBy: ['Both'], stage: 'qualification', path: 'qualification.staffPlacementTimeline.starting' },
  after30Days: { id: 'after30Days', label: 'Potential After 30 Days', type: 'number', usedBy: ['Both'], stage: 'qualification', path: 'qualification.staffPlacementTimeline.after30Days' },
  after90Days: { id: 'after90Days', label: 'Potential After 90 Days', type: 'number', usedBy: ['Both'], stage: 'qualification', path: 'qualification.staffPlacementTimeline.after90Days' },
  after180Days: { id: 'after180Days', label: 'Potential After 180 Days', type: 'number', usedBy: ['Both'], stage: 'qualification', path: 'qualification.staffPlacementTimeline.after180Days' },
  expectedAveragePayRate: { id: 'expectedAveragePayRate', label: 'Expected Average Pay Rate', type: 'number', usedBy: ['Both'], stage: 'qualification', path: 'qualification.expectedAveragePayRate', hints: { unit: '$' } },
  expectedAverageMarkup: { id: 'expectedAverageMarkup', label: 'Expected Average Markup (%)', type: 'number', usedBy: ['Both'], stage: 'qualification', path: 'qualification.expectedAverageMarkup', hints: { unit: '%' } },
  vendorStep1: { id: 'vendorStep1', label: 'Vendor Step 1', type: 'text', usedBy: ['Both'], stage: 'qualification', path: 'qualification.vendorSetupSteps.step1' },
  vendorStep2: { id: 'vendorStep2', label: 'Vendor Step 2', type: 'text', usedBy: ['Both'], stage: 'qualification', path: 'qualification.vendorSetupSteps.step2' },
  vendorStep3: { id: 'vendorStep3', label: 'Vendor Step 3', type: 'text', usedBy: ['Both'], stage: 'qualification', path: 'qualification.vendorSetupSteps.step3' },
  vendorStep4: { id: 'vendorStep4', label: 'Vendor Step 4', type: 'text', usedBy: ['Both'], stage: 'qualification', path: 'qualification.vendorSetupSteps.step4' },
  expectedCloseDate: { id: 'expectedCloseDate', label: 'Expected Close Date', type: 'date', usedBy: ['Both'], stage: 'qualification', path: 'qualification.expectedCloseDate' },
  qualificationNotes: { id: 'qualificationNotes', label: 'Qualification Notes', type: 'textarea', usedBy: ['Both'], stage: 'qualification', path: 'qualification.notes' },

  // Scoping
  competingAgencies: { id: 'competingAgencies', label: 'Number of Competing Agencies', type: 'number', usedBy: ['Both'], stage: 'scoping', path: 'scoping.competingAgencies' },
  onsite: { id: 'onsite', label: 'Onsite Work Required', type: 'boolean', usedBy: ['Both'], stage: 'scoping', path: 'scoping.onsite' },
  replaceAgency: { id: 'replaceAgency', label: 'Replacing Existing Agency', type: 'boolean', usedBy: ['Both'], stage: 'scoping', path: 'scoping.replaceAgency' },
  rolloverStaff: { id: 'rolloverStaff', label: 'Rollover Existing Staff', type: 'boolean', usedBy: ['Both'], stage: 'scoping', path: 'scoping.rolloverStaff' },
  backgroundCheck: { id: 'backgroundCheck', label: 'Background Check', type: 'boolean', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.backgroundCheck' },
  backgroundCheckPackages: { id: 'backgroundCheckPackages', label: 'Background Check Packages', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.backgroundCheckPackages', optionsSource: 'companyDefaults' },
  drugScreen: { id: 'drugScreen', label: 'Drug Screen', type: 'boolean', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.drugScreen' },
  drugScreeningPanels: { id: 'drugScreeningPanels', label: 'Drug Screening Panels', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.drugScreeningPanels', optionsSource: 'companyDefaults' },
  eVerify: { id: 'eVerify', label: 'E-Verify', type: 'boolean', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.eVerify' },
  requiredLicenses: { id: 'requiredLicenses', label: 'Required Licenses', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.requiredLicenses', optionsSource: 'companyDefaults' },
  requiredCertifications: { id: 'requiredCertifications', label: 'Required Certifications', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.requiredCertifications', optionsSource: 'companyDefaults' },
  experienceLevels: { id: 'experienceLevels', label: 'Experience Levels', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.experienceLevels', optionsSource: 'companyDefaults' },
  educationLevels: { id: 'educationLevels', label: 'Education Levels', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.educationLevels', optionsSource: 'companyDefaults' },
  physicalRequirements: { id: 'physicalRequirements', label: 'Physical Requirements', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.physicalRequirements', optionsSource: 'companyDefaults' },
  languages: { id: 'languages', label: 'Languages', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.languages', optionsSource: 'companyDefaults' },
  skills: { id: 'skills', label: 'Skills', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.skills', optionsSource: 'companyDefaults' },
  ppe: { id: 'ppe', label: 'Required PPE', type: 'multiselect', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.ppe', optionsSource: 'companyDefaults' },
  ppeProvidedBy: { id: 'ppeProvidedBy', label: 'PPE Provided By', type: 'select', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.ppeProvidedBy' },
  uniformRequirement: { id: 'uniformRequirement', label: 'Uniform Requirement', type: 'select', usedBy: ['All'], stage: 'scoping', path: 'scoping.compliance.uniformRequirement', optionsSource: 'companyDefaults' },
  timeclockSystem: { id: 'timeclockSystem', label: 'Timeclock System', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.timeclockSystem' },
  overtime: { id: 'overtime', label: 'Overtime Policy', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.overtime' },
  attendance: { id: 'attendance', label: 'Attendance Policy', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.attendance' },
  callOff: { id: 'callOff', label: 'Call-off Policy', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.callOff' },
  noCallNoShow: { id: 'noCallNoShow', label: 'No Call No Show Policy', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.noCallNoShow' },
  discipline: { id: 'discipline', label: 'Discipline Policy', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.discipline' },
  injuryReporting: { id: 'injuryReporting', label: 'Injury Reporting Process', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.shiftPolicies.injuryReporting' },
  poRequired: { id: 'poRequired', label: 'Purchase Order Required', type: 'boolean', usedBy: ['Both'], stage: 'scoping', path: 'scoping.invoicing.poRequired' },
  paymentTerms: { id: 'paymentTerms', label: 'Payment Terms', type: 'text', usedBy: ['Both'], stage: 'scoping', path: 'scoping.invoicing.paymentTerms' },
  deliveryMethod: { id: 'deliveryMethod', label: 'Invoice Delivery Method', type: 'select', usedBy: ['Both'], stage: 'scoping', path: 'scoping.invoicing.deliveryMethod' },
  frequency: { id: 'frequency', label: 'Invoice Frequency', type: 'select', usedBy: ['Both'], stage: 'scoping', path: 'scoping.invoicing.frequency' },
  preApproval: { id: 'preApproval', label: 'Pre-approval required for all placements', type: 'boolean', usedBy: ['Both'], stage: 'scoping', path: 'scoping.preApproval' },
  scopingNotes: { id: 'scopingNotes', label: 'Scoping Notes', type: 'textarea', usedBy: ['Both'], stage: 'scoping', path: 'scoping.notes' },

  // Proposal Drafted
  rateSheetUploaded: { id: 'rateSheetUploaded', label: 'Rate Sheet Uploaded', type: 'boolean', usedBy: ['Both'], stage: 'proposalDrafted', path: 'proposalDrafted.rateSheetUploaded' },
  positionRates: { id: 'positionRates', label: 'Position Rates', type: 'array', usedBy: ['Both'], stage: 'proposalDrafted', path: 'proposalDrafted.positionRates' },
  rollovers: { id: 'rollovers', label: 'Rollovers', type: 'array', usedBy: ['Both'], stage: 'proposalDrafted', path: 'proposalDrafted.rollovers' },
  proposalDraftedNotes: { id: 'proposalDraftedNotes', label: 'Proposal Drafted Notes', type: 'textarea', usedBy: ['Both'], stage: 'proposalDrafted', path: 'proposalDrafted.notes' },

  // Proposal Review
  underReviewBy: { id: 'underReviewBy', label: 'Proposal Being Reviewed By', type: 'array', usedBy: ['Both'], stage: 'proposalReview', path: 'proposalReview.underReviewBy' },
  expectedProposalResponseDate: { id: 'expectedProposalResponseDate', label: 'Expected Proposal Response Date', type: 'date', usedBy: ['Both'], stage: 'proposalReview', path: 'proposalReview.expectedProposalResponseDate' },
  proposalReviewNotes: { id: 'proposalReviewNotes', label: 'Proposal Review Notes', type: 'textarea', usedBy: ['Both'], stage: 'proposalReview', path: 'proposalReview.notes' },

  // Negotiation
  requestedChanges: { id: 'requestedChanges', label: 'Requested Changes', type: 'array', usedBy: ['Both'], stage: 'negotiation', path: 'negotiation.requestedChanges' },
  concessions: { id: 'concessions', label: 'Concessions', type: 'array', usedBy: ['Both'], stage: 'negotiation', path: 'negotiation.concessions' },
  negotiationNotes: { id: 'negotiationNotes', label: 'Negotiation Notes', type: 'textarea', usedBy: ['Both'], stage: 'negotiation', path: 'negotiation.notes' },

  // Verbal Agreement
  verbalFrom: { id: 'verbalFrom', label: 'Verbal From', type: 'text', usedBy: ['Both'] },
  verbalDate: { id: 'verbalDate', label: 'Verbal Date', type: 'date', usedBy: ['Both'], stage: 'verbalAgreement', path: 'verbalAgreement.verbalDate' },
  method: { id: 'method', label: 'Method', type: 'select', usedBy: ['Both'], stage: 'verbalAgreement', path: 'verbalAgreement.method' },
  conditionsToFulfill: { id: 'conditionsToFulfill', label: 'Conditions to Fulfill', type: 'array', usedBy: ['Both'], stage: 'verbalAgreement', path: 'verbalAgreement.conditionsToFulfill' },
  approvalsNeeded: { id: 'approvalsNeeded', label: 'Approvals Needed', type: 'array', usedBy: ['Both'], stage: 'verbalAgreement', path: 'verbalAgreement.approvalsNeeded' },
  verbalAgreementNotes: { id: 'verbalAgreementNotes', label: 'Verbal Agreement Notes', type: 'textarea', usedBy: ['Both'], stage: 'verbalAgreement', path: 'verbalAgreement.notes' },

  // Closed Won
  closingStatus: { id: 'closingStatus', label: 'Closing Status', type: 'select', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.status' },
  dateSigned: { id: 'dateSigned', label: 'Date Signed', type: 'date', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.dateSigned' },
  expirationDate: { id: 'expirationDate', label: 'Expiration Date', type: 'date', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.expirationDate' },
  rateSheetOnFile: { id: 'rateSheetOnFile', label: 'Rate Sheet On File', type: 'boolean', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.rateSheetOnFile' },
  msaSigned: { id: 'msaSigned', label: 'MSA Signed', type: 'boolean', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.msaSigned' },
  lostReason: { id: 'lostReason', label: 'Primary Reason for Loss', type: 'select', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.lostReason' },
  competitor: { id: 'competitor', label: 'Competitor Name', type: 'text', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.competitor' },
  lostTo: { id: 'lostTo', label: 'What did they offer?', type: 'textarea', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.lostTo' },
  priceDifference: { id: 'priceDifference', label: 'Price Difference ($)', type: 'number', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.priceDifference', hints: { unit: '$' } },
  closedWonDecisionMaker: { id: 'closedWonDecisionMaker', label: 'Decision Maker', type: 'text', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.decisionMaker' },
  customerFeedback: { id: 'customerFeedback', label: 'Customer Feedback', type: 'textarea', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.feedback' },
  lessonsLearned: { id: 'lessonsLearned', label: 'Lessons Learned', type: 'textarea', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.lessonsLearned' },
  closedWonNotes: { id: 'closedWonNotes', label: 'Closed Won Notes', type: 'textarea', usedBy: ['Both'], stage: 'closedWon', path: 'closedWon.notes' },
  expectedMarkup: { id: 'expectedMarkup', label: 'Expected Markup (%)', type: 'number', usedBy: ['Both'], hints: { unit: '%' } },
  backgroundCheckRequired: { id: 'backgroundCheckRequired', label: 'Background Check Required', type: 'boolean', usedBy: ['Both'] },
  eVerifyRequired: { id: 'eVerifyRequired', label: 'E-Verify Required', type: 'boolean', usedBy: ['Both'] },
  priority: { id: 'priority', label: 'Priority', type: 'select', options: [
    { value: 'low', label: 'Low' },
    { value: 'medium', label: 'Medium' },
    { value: 'high', label: 'High' },
  ], usedBy: ['JobOrder'], tags: ['routing','urgency'] },
};


