// User Profile Schema for HRX Platform
// Supports both traditional enterprise employees and flexible/gig workforce users

export interface EmergencyContact {
  name: string;
  relationship: string;
  phone: string;
}

export interface ExternalIds {
  workdayId?: string;
  adpId?: string;
  bambooId?: string;
  [key: string]: string | undefined;
}

export interface TraitsProfile {
  // Auto-generated by HRX Traits Engine
  [key: string]: any;
}

export interface CareerPathSuggestion {
  title: string;
  confidence: number;
  reasoning: string;
  requirements: string[];
}

export interface NotificationSettings {
  emailNotifications: boolean;
  pushNotifications: boolean;
  smsNotifications: boolean;
  scheduleUpdates: boolean;
  assignmentUpdates: boolean;
  systemUpdates: boolean;
  marketingEmails: boolean;
  companionNotifications: boolean;
  performanceFeedback: boolean;
  trainingOpportunities: boolean;
  emergencyAlerts: boolean;
}

export interface PrivacySettings {
  profileVisibility: 'public' | 'private' | 'team';
  showContactInfo: boolean;
  showSchedule: boolean;
  allowDataAnalytics: boolean;
  allowLocationSharing: boolean;
}

export interface LocationSettings {
  locationSharingEnabled: boolean;
  locationGranularity: 'always' | 'work_hours' | 'assignments_only' | 'manual' | 'disabled';
  lastLocationUpdate?: Date;
  locationAccuracy: 'high' | 'medium' | 'low';
  geofencingEnabled: boolean;
  backgroundLocationEnabled: boolean;
  batteryOptimizationEnabled: boolean;
  dataUsageOptimized: boolean;
}

export interface UserProfile {
  // üßç Basic Identity
  firstName: string;
  lastName: string;
  preferredName?: string;
  email: string;
  phone: string;
  dateOfBirth?: Date;
  gender?: 'Male' | 'Female' | 'Nonbinary' | 'Other' | 'Prefer not to say';
  avatar?: string; // file URL

  // üìç Employment Classification
  securityLevel: '0' | '1' | '2' | '3' | '4' | '5'; // 0=Dismissed, 1=Applicant, 2=Flex, 3=Worker, 4=Manager, 5=Admin
  employmentType: 'Full-Time' | 'Part-Time' | 'Contract' | 'Flex';
  departmentId: string; // ref ID to Departments collection
  divisionId?: string; // ref ID to Divisions collection
  locationId?: string; // ref ID to Locations collection
  regionId?: string; // ref ID to Regions collection
  managerId?: string; // ref ID to another user

  // üóÇÔ∏è Metadata & Structure
  startDate?: Date;
  workStatus: 'Active' | 'On Leave' | 'Terminated' | 'Suspended' | 'Pending';
  workerId?: string; // Optional custom ID from HRIS
  union?: string; // Union name or boolean flag
  workEligibility?: boolean; // Eligibility for employment in the region
  languages?: string[]; // Spoken/written languages

  // üß† Behavioral AI (HRX-Specific) - Auto-generated
  traitsProfile?: TraitsProfile;
  jobSatisfactionIndex?: number; // Rolling score (1‚Äì100)
  burnoutRiskScore?: number; // Rolling score (1‚Äì100)
  companionLastActiveAt?: Date; // Last Companion activity timestamp
  careerPathSuggestions?: CareerPathSuggestion[]; // AI-generated career suggestions

  // üîê System & Sync
  createdBy: string; // ref ID to admin user who created this worker
  source: 'Manual' | 'Import' | 'Job App' | 'Flex Sign-Up';
  createdAt: Date;
  updatedAt: Date;
  externalIds?: ExternalIds;

  // üß™ Enrichments
  emergencyContact?: EmergencyContact;
  transportMethod?: 'Car' | 'Public Transit' | 'Bike' | 'Walk';

  // üîí Privacy & Notifications
  notificationSettings?: NotificationSettings;
  privacySettings?: PrivacySettings;
  locationSettings?: LocationSettings;

  // Legacy fields for backward compatibility
  role?: string;
  jobTitle?: string;
  department?: string;
  tenantId?: string;
  activeTenantId?: string;
  tenantIds?: string[] | { [tenantId: string]: any };
  userGroupIds?: string[];
  addressInfo?: any;
  certifications?: any[];
  skills?: any[];
  yearsExperience?: string;
  educationLevel?: string;
  backgroundCheckStatus?: string;
  vaccinationStatus?: string;
  specialTraining?: string;
  resume?: any;
  // Module access flags (per-user overrides)
  crm_sales?: boolean;
  recruiter?: boolean;
  jobsBoard?: boolean;
}

// Form interface for editing user profiles
export interface UserProfileForm {
  // Basic Identity
  firstName: string;
  lastName: string;
  preferredName?: string;
  email: string;
  phone: string;
  linkedinUrl?: string;
  dateOfBirth?: string; // ISO date string for form input
  gender?: 'Male' | 'Female' | 'Nonbinary' | 'Other' | 'Prefer not to say';
  
  // Employment Classification
  securityLevel: '0' | '1' | '2' | '3' | '4' | '5'; // 0=Dismissed, 1=Applicant, 2=Flex, 3=Worker, 4=Manager, 5=Admin
  employmentType: 'Full-Time' | 'Part-Time' | 'Contract' | 'Flex';
  departmentId: string;
  divisionId?: string;
  locationId?: string;
  regionId?: string;
  managerId?: string;
  
  // Metadata & Structure
  startDate?: string; // ISO date string for form input
  workStatus: 'Active' | 'On Leave' | 'Terminated' | 'Suspended' | 'Pending';
  workerId?: string;
  union?: string;
  workEligibility?: boolean;
  languages?: string[];
  
  // Enrichments
  emergencyContact?: EmergencyContact;
  transportMethod?: 'Car' | 'Public Transit' | 'Bike' | 'Walk';
  
  // Legacy fields
  role?: string;
  jobTitle?: string;
  department?: string;
  // Module access flags (per-user overrides)
  crm_sales?: boolean;
  recruiter?: boolean;
  jobsBoard?: boolean;
}

// Validation schema for form validation
export const USER_PROFILE_VALIDATION = {
  firstName: { required: true, minLength: 1, maxLength: 50 },
  lastName: { required: true, minLength: 1, maxLength: 50 },
  email: { required: true, pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },
  phone: { required: true, pattern: /^\+?[\d\s()+-]+$/ },
  securityLevel: { required: true },
  employmentType: { required: true },
  departmentId: { required: true },
  workStatus: { required: true },
} as const; 