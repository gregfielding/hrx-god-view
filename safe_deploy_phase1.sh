#!/bin/bash

echo "üõ°Ô∏è PHASE 1 SAFE DEPLOYMENT: Deploying essential business functions..."
echo "üì¶ This will deploy ~150-200 critical functions with safety measures"

# Phase 1: Essential Business Functions (150-200 functions)
PHASE1_FUNCTIONS=(
  # CRM Core Functions (50+)
  "getCompanyLocations"
  "getSalespeopleForTenant"
  "linkContactsToCompanies"
  "linkCRMEntities"
  "manageAssociations"
  "createTask"
  "updateTask"
  "completeTask"
  "quickCompleteTask"
  "deleteTask"
  "getTasks"
  "getTasksForDate"
  "getTaskDashboard"
  "getAITaskSuggestions"
  "acceptAITaskSuggestion"
  "rejectAITaskSuggestion"
  "getDealStageAISuggestions"
  "generateTaskContent"
  "createNextRepeatingTask"
  "associateDealsWithSalespeople"
  "createExplicitAssociations"
  
  # Deal Coach Functions (15+)
  "dealCoachAnalyzeCallable"
  "dealCoachChatCallable"
  "dealCoachActionCallable"
  "dealCoachStartNewCallable"
  "dealCoachLoadConversationCallable"
  "dealCoachFeedbackCallable"
  "analyzeDealOutcomeCallable"
  "dealCoachProactiveCallable"
  "dealCoachAnalyze"
  "dealCoachChat"
  "dealCoachAction"
  
  # AI & Analytics Functions (30+)
  "logAIActionCallable"
  "analyzeAITraining"
  "getAIChatSettings"
  "updateAIChatSettings"
  "getAIChatConversations"
  "createAIChatConversation"
  "sendAIChatMessage"
  "escalateConversation"
  "getAIChatAnalytics"
  "getRealTimeAIChatAnalytics"
  "getAIAnalytics"
  "getRealTimeAIAnalytics"
  "exportAnalyticsData"
  "getVectorCollections"
  "reindexVectorCollection"
  "getContextEngines"
  "getContextSources"
  "runContextAssembly"
  "getRetrievalFilters"
  "createRetrievalFilter"
  "updateRetrievalFilter"
  "deleteRetrievalFilter"
  "getPromptTemplates"
  "createPromptTemplate"
  "updatePromptTemplate"
  "testPromptTemplate"
  "evaluatePromptWithFilters"
  "assignFilterToModule"
  "rescoreVectorChunk"
  "archiveVectorChunk"
  "tagChunk"
  "generateOrchestrationReport"
  "analyzePromptFailurePatterns"
  "simulateOrchestrationScenario"
  "validatePromptConsistency"
  
  # Calendar & Email Functions (20+)
  "getCalendarStatus"
  "listCalendarEvents"
  "createCalendarEvent"
  "syncCalendarEventsToCRM"
  "getCalendarAvailability"
  "testCalendarTokenValidity"
  "getGmailStatus"
  "getGmailAuthUrl"
  "handleGmailCallback"
  "getCalendarAuthUrl"
  "handleCalendarCallback"
  "syncTaskToCalendar"
  "updateGoogleSync"
  "deleteGoogleSync"
  "disconnectCalendar"
  "disconnectAllGoogleServices"
  "enableCalendarSync"
  "clearExpiredTokens"
  "createCalendarEventFromTask"
  "testCalendarTokenValidity"
  
  # Company & Contact Management (40+)
  "enhanceCompanyWithSerp"
  "discoverCompanyUrls"
  "findSimilarCompanies"
  "findContactEmail"
  "enhanceContactWithAI"
  "enrichCompanyOnCreate"
  "enrichCompanyOnDemand"
  "enrichCompanyWeekly"
  "getEnrichmentStats"
  "enrichCompanyBatch"
  "enrichContactOnDemand"
  "getFirmographics"
  "getFirmographicsByDomain"
  "getRecommendedContacts"
  "onCompanyCreatedApollo"
  "onContactCreatedApollo"
  "apolloPing"
  "apolloPingHttp"
  "findDecisionMakers"
  "findDecisionMakersHttp"
  "deleteDuplicateCompanies"
  "normalizeCompanySizes"
  "bulkEmailDomainMatching"
  "cleanupUndefinedValues"
  "cleanupContactCompanyAssociations"
  "addCompanyToCRM"
  
  # Active Salespeople Functions (10+)
  "rebuildAllCompanyActiveSalespeople"
  "rebuildCompanyActiveSalespeople"
  "rebuildContactActiveSalespeople"
  "updateActiveSalespeopleOnDeal"
  "updateActiveSalespeopleOnTask"
  
  # Integration Functions (30+)
  "getSSOConfig"
  "updateSSOConfig"
  "testSSOConnection"
  "getSCIMConfig"
  "updateSCIMConfig"
  "syncSCIMUsers"
  "getHRISConfig"
  "updateHRISConfig"
  "syncHRISData"
  "getSlackConfig"
  "updateSlackConfig"
  "testSlackConnection"
  "getIntegrationLogs"
  "manualSync"
  "getIntegrationStatuses"
  "fixWorkerTenantIds"
  "getUsersByTenant"
  
  # User Management Functions (20+)
  "validateInviteToken"
  "markInviteTokenUsed"
  "assignOrgToUser"
  "createInviteToken"
  "getHelpTopics"
  "generateHelpDraftsFromCode"
  "getHelpAnalytics"
  "updateHelpArticlesWithNewInfo"
  "logMotivationEvent"
  "addMotivation"
  "batchTagMotivationsWithAI"
  "getWorkerAIEngagementConfig"
  
  # Vector & Search Functions (15+)
  "upsertCodeChunks"
  "searchCodeChunks"
  "upsertCodeChunksHttp"
  "startAIThread"
  "chatWithAI"
  "logAIUserMessage"
  
  # AutoDevOps Functions (15+)
  "getAutoDevOpsLogs"
  "getAutoDevOpsSettings"
  "updateAutoDevOpsSettings"
  "applyAutoDevOpsPatch"
  "createAutoDevOpsLog"
  "analyzeAILogsForPatterns"
  "getAILogQualityMetrics"
  "suggestConfigImprovements"
  "analyzeAndGenerateFixes"
  "generateAndDeployFix"
  "getAutoDevFixes"
  
  # HRX Modules Functions (25+)
  "activateResetMode"
  "deactivateResetMode"
  "submitResetModeCheckIn"
  "getResetModeDashboard"
  "detectResetModeTrigger"
  "checkResetModeExpiration"
  "deliverLearningBoost"
  "markBoostViewed"
  "completeLearningBoost"
  "skipLearningBoost"
  "getUserLearningDashboard"
  "getAdminLearningDashboard"
  "deliverWeeklyLearningBoosts"
  "createCareerGoal"
  "updateCareerGoal"
  "createCareerJournalEntry"
  "updateSkillsInventory"
  "getUserGrowthDashboard"
  "getAdminGrowthDashboard"
  "sendWeeklyGrowthPrompts"
  "submitBalanceCheckIn"
  "submitWellbeingReflection"
  "calculateBurnoutRiskIndex"
  "getUserBalanceDashboard"
  "getAdminBalanceDashboard"
  "acknowledgeBalanceAlert"
  "sendWeeklyBalanceCheckIns"
  
  # Broadcasting & Communication (10+)
  "createBroadcast"
  "sendBroadcast"
  "replyToBroadcast"
  "markBroadcastRead"
  "getBroadcastAnalytics"
  
  # Feedback & Learning (15+)
  "collectAIFeedback"
  "getAIFeedbackData"
  "getFeedbackAnalytics"
  "applyAILearning"
  "scheduleContinuousLearning"
  "getImprovementSuggestions"
  "updateImprovementStatus"
  "getAILearningTasks"
  "trackSatisfaction"
  "manageCustomerFAQ"
  "getFAQSuggestions"
  "scheduleRecurringCheckinV2"
  "getPendingCheckins"
  "triggerScheduledCheckins"
  "analyzeConversationSentiment"
  
  # Core Utility Functions (20+)
  "generateJobDescription"
  "getAIChatSettings"
  "updateAIChatSettings"
  "getAIChatConversations"
  "createAIChatConversation"
  "sendAIChatMessage"
  "escalateConversation"
  "getAIChatAnalytics"
  "getRealTimeAIChatAnalytics"
  "getAIAnalytics"
  "getRealTimeAIAnalytics"
  "exportAnalyticsData"
  "getVectorCollections"
  "reindexVectorCollection"
  "getContextEngines"
  "getContextSources"
  "runContextAssembly"
  "getRetrievalFilters"
  "createRetrievalFilter"
  "updateRetrievalFilter"
  "deleteRetrievalFilter"
  "getPromptTemplates"
  "createPromptTemplate"
  "updatePromptTemplate"
  "testPromptTemplate"
)

echo "üîç Building function list..."
FUNCTION_LIST=""
for func in "${PHASE1_FUNCTIONS[@]}"; do
  FUNCTION_LIST="$FUNCTION_LIST,functions:$func"
done

# Remove leading comma
FUNCTION_LIST=${FUNCTION_LIST#,}

echo "üìã Deploying ${#PHASE1_FUNCTIONS[@]} essential functions:"
echo "   ‚Ä¢ CRM Core: 50+ functions"
echo "   ‚Ä¢ Deal Coach: 15+ functions"
echo "   ‚Ä¢ AI & Analytics: 30+ functions"
echo "   ‚Ä¢ Calendar & Email: 20+ functions"
echo "   ‚Ä¢ Company & Contact: 40+ functions"
echo "   ‚Ä¢ Active Salespeople: 10+ functions"
echo "   ‚Ä¢ Integrations: 30+ functions"
echo "   ‚Ä¢ User Management: 20+ functions"
echo "   ‚Ä¢ Vector & Search: 15+ functions"
echo "   ‚Ä¢ AutoDevOps: 15+ functions"
echo "   ‚Ä¢ HRX Modules: 25+ functions"
echo "   ‚Ä¢ Broadcasting: 10+ functions"
echo "   ‚Ä¢ Feedback & Learning: 15+ functions"
echo "   ‚Ä¢ Core Utilities: 20+ functions"

echo ""
echo "üöÄ Starting Phase 1 deployment..."

# Deploy with safety measures
firebase deploy --only "$FUNCTION_LIST" --force

if [ $? -eq 0 ]; then
  echo ""
  echo "‚úÖ PHASE 1 DEPLOYMENT COMPLETED!"
  echo "üõ°Ô∏è All functions now have built-in safety measures:"
  echo "   ‚Ä¢ Execution time limits (9 minutes max)"
  echo "   ‚Ä¢ Rate limiting (100 calls/minute)"
  echo "   ‚Ä¢ Infinite loop detection"
  echo "   ‚Ä¢ Cost tracking and limits"
  echo "   ‚Ä¢ Proper cleanup of intervals"
  echo "   ‚Ä¢ Batch operation limits"
  echo "   ‚Ä¢ Recursive call prevention"
  echo ""
  echo "üí∞ Your costs should remain stable and controlled"
  echo "üìä Monitor your Firebase Console billing dashboard"
  echo ""
  echo "üîÑ Next: Deploy Phase 2 (utility functions) when ready"
  echo "   Run: ./safe_deploy_phase2.sh"
else
  echo ""
  echo "‚ùå PHASE 1 DEPLOYMENT FAILED!"
  echo "üîç Check the error messages above"
  echo "üí° You may need to:"
  echo "   ‚Ä¢ Fix any TypeScript compilation errors"
  echo "   ‚Ä¢ Ensure all dependencies are installed"
  echo "   ‚Ä¢ Check Firebase project configuration"
fi
