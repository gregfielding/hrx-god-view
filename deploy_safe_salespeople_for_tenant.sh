#!/bin/bash

echo "üõ°Ô∏è DEPLOYING HARDENED SALESPEOPLE FOR TENANT (Query Limits)"
echo "============================================================"

# Hardened Salespeople for Tenant Function (Phase 1)
SAFE_SALESPEOPLE_FUNCTION=(
  "getSalespeopleForTenant"
)

echo ""
echo "üìã Function to deploy (allowlist approach):"
for func in "${SAFE_SALESPEOPLE_FUNCTION[@]}"; do
  echo "   ‚Ä¢ $func"
done

echo ""
echo "üîí Hardening Playbook Compliance:"
echo "   ‚Ä¢ Circuit breaker enabled (CIRCUIT_BREAKER env var)"
echo "   ‚Ä¢ Max execution time: 55s (under 60s limit)"
echo "   ‚Ä¢ Query limits: Max 1000 users per query, 500 salespeople returned"
echo "   ‚Ä¢ Pagination: Max 10 queries to prevent runaway reads"
echo "   ‚Ä¢ Input validation: Strict tenantId validation"
echo "   ‚Ä¢ AbortSignal timeout handling"

echo ""
echo "‚öôÔ∏è Production Safety Defaults (Gen2/Cloud Run):"
echo "   ‚Ä¢ Max instances: 2 (start conservative)"
echo "   ‚Ä¢ Concurrency: 1 (callable functions)"
echo "   ‚Ä¢ Min instances: 0 (keep cold)"
echo "   ‚Ä¢ Timeout: 55s (short timeouts surface bugs)"
echo "   ‚Ä¢ Retries: off (functions are idempotent)"

echo ""
echo "üöÄ Building and deploying..."

# Build the functions
echo "üì¶ Building TypeScript..."
cd functions
npm run build

if [ $? -ne 0 ]; then
  echo "‚ùå Build failed! Please check for TypeScript errors."
  exit 1
fi

echo "‚úÖ Build successful!"

# Deploy only the hardened function (allowlist approach)
echo ""
echo "üöÄ Deploying hardened function..."

# Create deployment list
FUNCTIONS_LIST=""
for func in "${SAFE_SALESPEOPLE_FUNCTION[@]}"; do
  if [ -z "$FUNCTIONS_LIST" ]; then
    FUNCTIONS_LIST="$func"
  else
    FUNCTIONS_LIST="$FUNCTIONS_LIST,$func"
  fi
done

# Deploy with production safety defaults
echo "üì§ Deploying: $FUNCTIONS_LIST"
firebase deploy --only functions:$FUNCTIONS_LIST

if [ $? -eq 0 ]; then
  echo ""
  echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
  echo ""
  echo "üîç Next Steps:"
  echo "   1. Monitor Firebase Console billing for cost reduction"
  echo "   2. Test salespeople retrieval functionality"
  echo "   3. Check Cloud Run logs for any issues"
  echo "   4. Verify query limits are working correctly"
  echo ""
  echo "üõ°Ô∏è Safety Features Active:"
  echo "   ‚Ä¢ Circuit breaker: Set CIRCUIT_BREAKER=on to disable function"
  echo "   ‚Ä¢ Timeout limits: Function will abort after 55s"
  echo "   ‚Ä¢ Query limits: Max 1000 users per query, 500 salespeople returned"
  echo "   ‚Ä¢ Pagination: Max 10 queries to prevent runaway reads"
  echo "   ‚Ä¢ Input validation: Strict tenantId and authentication checks"
  echo ""
  echo "üìä Monitoring Commands:"
  echo "   ‚Ä¢ View logs: firebase functions:log --only $FUNCTIONS_LIST"
  echo "   ‚Ä¢ Check status: firebase functions:list | grep -E '(${FUNCTIONS_LIST//,/|})'"
  echo "   ‚Ä¢ Monitor costs: Check Firebase Console > Usage and billing"
  echo ""
  echo "üéØ Expected Impact:"
  echo "   ‚Ä¢ Massive cost reduction from query limits (vs fetching all users)"
  echo "   ‚Ä¢ Prevention of runaway reads with pagination"
  echo "   ‚Ä¢ Focus on tenant-specific salespeople only"
  echo "   ‚Ä¢ Graceful timeout handling (55s limit)"
  echo "   ‚Ä¢ Significant performance improvement for large user bases"
else
  echo ""
  echo "‚ùå DEPLOYMENT FAILED!"
  echo "Please check the error messages above and try again."
  exit 1
fi

echo ""
echo "üéØ Phase 1 Function 7 Complete: Salespeople for Tenant Hardened (Query Limits)"
echo "Ready for next Phase 1 function: dealCoachAnalyzeCallable"
